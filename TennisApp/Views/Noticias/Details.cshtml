@using Microsoft.AspNet.Identity
@model TennisApp.Models.Noticia

@{
    ViewBag.Title = "Detalhes";
    ViewBag.user = User.Identity.GetUserName();
}
@if (TempData["Error"] != null)
{
    <div id="msg" class="alert alert-danger fade in">
        <strong>Erro!</strong>
        Ocorreu um erro: @TempData["Error"].ToString() .
    </div>
}
<script src="~/Scripts/jquery-1.10.2.js"></script>

<div class="container-base">
    <div class="row">
        <div class="col-md-12" style="padding-top:10px;">
            <justify><h2>@Html.DisplayFor(model => model.Titulo)</h2></justify>
        </div>
    </div>

    <div class="row">
        <div class="col-md-12">
            @Html.DisplayFor(model => model.DataPublicacao) - Publicado por: @Html.DisplayFor(model => model.Criador.Nome)
        </div>
    </div>
    <hr />
    <div class="row">
        <div class="col-md-12">
            @{string imgSRC = "/Imagens/" + Model.Foto;
                <center><img src="@imgSRC" alt="Sample Image" style="height:auto; width:600px;" /></center>
            }
        </div>
    </div>

    <div class="row">
        <div class="col-md-12" style="text-align:justify; padding-top:20px;">
            @Html.Raw(Model.Descricao)
        </div>
    </div>
    <div class="row" style="padding-left:10px; padding-right:10px">
        <div class="col-md-6" style="text-align:left; font-size:16px;">
            @Html.ActionLink("Voltar atrás", "Index")
        </div>
        @if (User.IsInRole("Moderador") || Model.Criador.UserName.Equals(User.Identity.Name))
        {// se o utilizador for do tipo 'Moderador' ou o 'criador' da notícia,
         // pode editar a notícia
        <div class="col-md-6" style="text-align:right; font-size:16px;">
            @Html.ActionLink("Editar", "Edit", new { id = Model.IdNoticia })
        </div>
        }
    </div>

    <div class="row">
        <div class="col-md-12">
            <center><h3>Comentários</h3></center>
        </div>
        <!-- Criar um comentario-->
        @if (User.Identity.IsAuthenticated)
        {
            using (Html.BeginForm("AddComment", "Comentarios", FormMethod.Post))
            {
                @Html.AntiForgeryToken()
                @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                <input type="hidden" name="idNoticia" value="@Model.IdNoticia" />
              
                <div class="row">
                    <div class="col-md-12">
                        @Html.Label("Comentário", htmlAttributes: new { @class = "control-label col-md-2" }) <br />
                        <TEXTAREA id="comentario" name="comentario" rows="20" cols="80" style="resize:none"></TEXTAREA>
                        <script>
                            CKEDITOR.replace('comentario');
                        </script>
                        <div id="charNum" class="col-md-3" style="float:left;">Faltam 500 caracteres</div>
                        <div id="linesUsed" class="col-md-3" style="float:left;">Máximo de 20 linhas: 0</div>
                    </div>
                    <div class="col-md-12" style="text-align:right;">
                        <input type="submit" value="Adicionar comentário" class="btn btnCriar" />
                    </div>
                </div>

            }
        }
        <!-- Mostrar comentarios-->
        <div class="col-md-12">
            @foreach (var c in Model.Comentarios.OrderByDescending(cc => cc.DataComentario))
            {
                <div class="col-md-12">
                    <label style="font-weight:bold; font-size:16px;">@c.Criador.Nome</label>
                    <label style="color:black"> - @c.DataComentario</label>  <br />
                    @if (c.Criador.Equals(User.Identity.GetUserId()) || User.IsInRole("Administrador"))
                    {
                        <button type="button" class="btn btnCriar" data-toggle="modal" data-target="#myModal" style="float:right; border:0px;">X</button>
                        using (Html.BeginForm("Delete", "Comentarios", FormMethod.Post, new { enctype = "multipart/form-data" }))
                        {
                            @Html.AntiForgeryToken()
                            @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                            // id do comentario para ser apagado
                            <input type="hidden" name="IdComentario" value="@c.IdComentario" />
                            // id da notícia
                            @Html.HiddenFor(model => model.IdNoticia)

                            //Modal
                            <div id="myModal" class="modal fade" role="dialog">
                                <div class="modal-dialog">
                                    <!-- Modal content-->
                                    <div class="modal-content">
                                        <div class="modal-header">
                                            <button type="button" class="close" data-dismiss="modal">&times;</button>
                                            <h4 class="modal-title">Apagar</h4>
                                        </div>
                                        <div class="modal-body">
                                            <p>Tem a certeza que quer apagar este comentário: @Html.Raw(c.Texto)</p>
                                        </div>
                                        <div class="modal-footer">
                                            <input type="submit" value="Sim" class="btn btn-default" /> |
                                            <button type="button" class="btn btnCriar" data-dismiss="modal">Cancelar</button>
                                        </div>
                                    </div>

                                </div>
                            </div>
                        }
                    }
                    <p class="pSemTamanho">
                        @Html.Raw(c.Texto)
                    </p>

                </div>
                        <hr />
            }

        </div>
    </div>
</div>


<script>
    $(document).ready(function () {

        //Limita quantos caracteres que a textarea pode ter
        $('#comentario').keypress(function (event) {
            var max = 500;
            var len = $(this).val().length;

            if (event.which < 0x20) {
                // e.which < 0x20, then it's not a printable character
                // e.which === 0 - Not a character
                return; // Do nothing
            }

            if (len >= max) {
                event.preventDefault();
            }

        });

        //Mostra quantos caracteres faltam
        $('#comentario').keyup(function (event) {
            var max = 500;
            var len = $(this).val().length;
            var char = max - len;

            $('#charNum').text('Faltam ' + char + ' caracteres');

        });

        //Limita o número de linhas que a textarea pode ter e mostra quantas linhas faltam
        $('#comentario').keydown(function (e) {

            var maxLines = 20;
            var numLines = $(this).val().split("\n").length;

            $('#linesUsed').text('Máximo de 20 linhas:' + numLines);

            if (e.keyCode == 13 && numLines >= maxLines) {
                return false;
            }
        });

    });
</script>
